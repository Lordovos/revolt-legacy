mob/unit
	icon = 'assets/units.dmi'
	icon_state = "default"
	density = FALSE
	pixel_y = 4
	appearance_flags = PIXEL_SCALE

	var/is_busy = FALSE
	var/job as text
	var/level = 0 as num
	var/health = 0 as num
	var/max_health = 0 as num
	var/is_dead = FALSE as anything in list(TRUE, FALSE)
	var/magic = 0 as num
	var/max_magic = 0 as num
	var/magic_regen = 0 as num
	var/move = 0 as num
	var/max_move = 0 as num
	var/action = 0 as num
	var/max_action = 0 as num
	var/list/abilities
	// The previous path generated by something like flood_fill().
	var/list/path

mob/unit/New()
	..()
	src.SetMove(src.max_move)
	src.SetHealth(src.max_health)
	src.SetMagic(src.max_magic)
	src.SetAction(src.max_action)

mob/unit/Click()
	var/client/c = usr.client

	if (c)
		var/mob/unit/u = c.selected_unit

		if (u?.is_busy)
			::chat?.Update("[u.name] is busy.")

		else if (u == src)
			u.Unselect(c)
			c.mob.loc = src.loc
			c.eye = c.mob

		else if (u != src)
			u?.Unselect(c)
			src.Select(c)

			if (!src.is_dead)
				src.path = ::flood_fill(src.loc, src.move)

				for (var/turf/t in src.path)
					if (src.path[t] == 0 || src.path[t] > src.move)
						continue

					if (t.GetUnit())
						continue

					new /obj/tile_indicator(t)

mob/unit/proc/Select(client/c)
	c.selected_unit = src
	c.unit_indicator?.Draw()
	src.vis_contents += c.unit_indicator
	c.mob.loc = src.loc
	c.eye = src
	world << "[src.name]\n[src.job], LV [src.level]\nMOVE [src.move]/[src.max_move]\nHP [src.health]/[src.max_health]\nMP [src.magic]/[src.max_magic]\nREGEN [src.magic_regen]\nAP [src.action]/[src.max_action]"

mob/unit/proc/Unselect(client/c)
	if (c.selected_unit.path)
		for (var/turf/t in c.selected_unit.path)
			for (var/obj/tile_indicator/ti in t)
				ti.loc = null

	c.selected_unit = null
	src.vis_contents -= c.unit_indicator

mob/unit/proc/SetMove(n)
	src.move = clamp(n, 0, src.max_move)

mob/unit/proc/SetHealth(n)
	src.health = clamp(n, 0, src.max_health)

mob/unit/proc/SetMagic(n)
	src.magic = clamp(n, 0, src.max_magic)

mob/unit/proc/SetAction(n)
	src.action = clamp(n, 0, src.max_action)

mob/unit/proc/Death()
	::chat?.Update("[src.name] dies.")
	src.icon_state = "grave"

	var/obj/tile_indicator/indicator

	for (var/turf/t in src.path)
		for (indicator in t)
			indicator.loc = null

mob/unit/verb/Damage()
	set src in world

	if (src.is_dead)
		::chat?.Update("[src.name] is already dead.")

	else
		var/damage = roll("1d6+3")

		new /obj/unit_message(null, src, damage)
		src.SetHealth(src.health - damage)
		animate(src, color = "#d83828", time = 1)
		animate(color = null, time = 1)

		spawn (2)
			animate(src, alpha = 0, time = 0.5, loop = 12)
			animate(alpha = 255, time = 0.5)

		::chat?.Update("[src.name] takes [damage] damage! (HP [src.health]/[src.max_health])")

		if (src.health == 0)
			src.is_dead = TRUE
			src.Death()

mob/unit/wizard
	name = "Wizard"
	icon_state = "wizard"
	job = "Wizard"
	level = 10
	max_health = 45
	max_magic = 80
	magic_regen = 10
	max_move = 5
	max_action = 4

mob/unit/recruit
	name = "Recruit"
	icon_state = "recruit"
	job = "Recruit"
	level = 1
	max_health = 20
	max_magic = 5
	magic_regen = 1
	max_move = 20
	max_action = 2

mob/unit/recruit/verb/Shortsword()
	set src in world

	var/damage = roll("1d4+2")

	for (var/mob/unit/u in oview(1, src))
		new /obj/unit_message(null, u, damage)
		u.SetHealth(u.health - damage)
		animate(u, color = "#d83828", time = 1)
		animate(color = null, time = 1)

		spawn (2)
			animate(u, alpha = 0, time = 0.5, loop = 12)
			animate(alpha = 255, time = 0.5)

		::chat?.Update("[src.name] slashes with their shortsword! [u.name] takes [damage] damage.")
		// ::chat?.Update("[u.name] takes [damage] damage! (HP [u.health]/[u.max_health])")

		if (u.health == 0)
			u.is_dead = TRUE
			u.Death()

mob/unit/vagrant
	name = "Vagrant"
	icon_state = "vagrant"
	job = "Vagrant"
	level = 1
	max_health = 10
	max_move = 3
	max_action = 2

mob/unit/vagrant/verb/Dagger()
	set src in world

	if (!src.is_dead)
		var/damage = roll("1d3+2")
		var/dist = 1
		var/list/path = ::flood_fill(src.loc, dist)

		for (var/turf/t in path)
			if (path[t] == 0  || path[t] > dist)
				continue

			var/mob/unit/u = t.GetUnit()

			if (u && !u.is_dead)
				new /obj/unit_message(null, u, damage)
				u.SetHealth(u.health - damage)
				animate(u, color = "#d83828", time = 1)
				animate(color = null, time = 1)

				spawn (2)
					animate(u, alpha = 0, time = 0.5, loop = 12)
					animate(alpha = 255, time = 0.5)

				::chat?.Update("[src.name] stabs with their dagger! [u.name] takes [damage] damage.")

				if (u.health == 0)
					u.is_dead = TRUE
					u.Death()

	else
		::chat?.Update("[src.name] is dead.")
