mob/unit
	icon = 'assets/units.dmi'
	icon_state = "default"
	density = FALSE
	pixel_y = 4
	appearance_flags = PIXEL_SCALE

	var/job as text
	var/level = 0 as num
	var/move = 0 as num
	var/max_move = 0 as num
	var/health = 0 as num
	var/max_health = 0 as num
	var/is_dead = FALSE as anything in list(TRUE, FALSE)
	var/magic = 0 as num
	var/max_magic = 0 as num
	var/magic_regen = 0 as num
	var/action = 0 as num
	var/max_action = 0 as num
	var/list/abilities
	// The previous path generated by something like flood_fill().
	var/list/path

mob/unit/New()
	..()
	src.SetMove(src.max_move)
	src.SetHealth(src.max_health)
	src.SetMagic(src.max_magic)
	src.SetAction(src.max_action)

mob/unit/Click()
	var/client/c = usr.client

	if (c)
		var/mob/unit/u = c.selected_unit

		if (u == src)
			u.Unselect(c)

		else if (u != src)
			u?.Unselect(c)
			src.Select(c)

			if (!src.is_dead)
				src.path = ::flood_fill(src.loc, src.move)

				for (var/turf/t in src.path)
					if (src.path[t] == 0 || src.path[t] > src.move)
						continue

					if (t.GetUnit())
						continue

					t.maptext = "<span style=\"text-align: right; margin-right: 4px; color: #fff; text-shadow: 1px 1px 0 #000;\">[src.path[t]]</span>"
					new /obj/tile_indicator(t)

			else
				::chat?.Update("[src.name] is dead.")

mob/unit/proc/Select(client/c)
	c.selected_unit = src
	c.unit_indicator?.Draw()
	src.vis_contents += c.unit_indicator
	world << "[src.name]\n[src.job], LV [src.level]\nMOVE [src.move]/[src.max_move]\nHP [src.health]/[src.max_health]\nMP [src.magic]/[src.max_magic]\nREGEN [src.magic_regen]\nAP [src.action]/[src.max_action]"

mob/unit/proc/Unselect(client/c)
	if (c.selected_unit.path)
		for (var/turf/t in c.selected_unit.path)
			t.maptext = null

			for (var/obj/tile_indicator/ti in t)
				ti.loc = null

	c.selected_unit = null
	src.vis_contents -= c.unit_indicator

mob/unit/proc/SetMove(n)
	src.move = clamp(n, 0, src.max_move)

mob/unit/proc/SetHealth(n)
	src.health = clamp(n, 0, src.max_health)

mob/unit/proc/SetMagic(n)
	src.magic = clamp(n, 0, src.max_magic)

mob/unit/proc/SetAction(n)
	src.action = clamp(n, 0, src.max_action)

mob/unit/proc/Death()
	::chat?.Update("[src.name] dies.")
	src.icon_state = "grave"

	var/obj/tile_indicator/indicator

	for (var/turf/t in src.path)
		t.maptext = null

		for (indicator in t)
			indicator.loc = null

mob/unit/verb/Damage()
	set src in world

	if (src.is_dead)
		::chat?.Update("[src.name] is already dead.")

	else
		var/damage = roll("1d6+3")

		new /obj/unit_message(null, src, damage)
		src.SetHealth(src.health - damage)
		::chat?.Update("[src.name] takes [damage] damage! (HP [src.health]/[src.max_health])")

		if (src.health == 0)
			src.is_dead = TRUE
			src.Death()

mob/unit/recruit
	name = "Recruit"
	icon_state = "recruit"
	job = "Recruit"
	level = 1
	max_move = 4
	max_health = 20
	max_magic = 5
	magic_regen = 1
	max_action = 2

mob/unit/vagrant
	name = "Vagrant"
	icon_state = "vagrant"
	job = "Vagrant"
	level = 1
	max_move = 3
	max_health = 10
	max_action = 2
